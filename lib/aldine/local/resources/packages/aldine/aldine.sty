%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Aldine package
%
% Project repository and bug tracker:
% https://github.com/SwagDevOps/aldine
%
% Changes:
%
% v0.2.0 - 2023/03/05 - introduce dropcap + detokenize commands parameters
% v0.1.2 - 2023/03/23 - add wrapfig package
% v0.1.1 - 2023/02/12 - trying to fix spaces added by shell commands
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ProvidesPackage{aldine}[2023/03/06 v0.2.0 Aldine package]
% packages from CLI commands templates --------------------------------
\RequirePackage{graphicx}
\RequirePackage{hyperref}
\RequirePackage{lettrine}
\RequirePackage{xstring}
\RequirePackage{wrapfig}
% packages used in commands below -------------------------------------
\RequirePackage{shellesc}
\RequirePackage{ifthen}  % provides conditonals...
\RequirePackage{xargs}   % uses a key-value package to define the layout of the optional arguments: \newcommandx{\foo}[3][1=1, 3=n]{...}
% set/get variables ---------------------------------------------------
\ExplSyntaxOn%
% \aldineSet{pi}{3.14}
\NewDocumentCommand{\aldineSet}{mm} {%
  \tl_clear_new:c { g__aldine_var_#1_tl } % clear an existing variable or allocate a new one
  \tl_gset:cn { g__aldine_var_#1_tl } { #2 } % set to the stated value
}%
% \aldineGet{pi}
\NewExpandableDocumentCommand{\aldineGet}{m} {%
  \tl_use:c { g__aldine_var_#1_tl } % deliver the contents
}%
\ExplSyntaxOff%
% emptypage -----------------------------------------------------------
\newcommandx*{\aldineEmptyPage}[1][1=false] {%
  \null
  \thispagestyle{empty}
  \ifthenelse{\equal{\#1}{true}} { \addtocounter{page}{-1} } {}%
  \newpage
}%
% exec ----------------------------------------------------------------
\newcommand*{\aldineShellExec}[1] {%
  \ShellEscape{#1}%
}%
% Include (right-here) given file.
%
% see: https://tex.stackexchange.com/questions/18017/space-inserted-after-input-call
\newcommand*{\aldineInclude}[1] {%
  \input{#1}%
  \unskip%
}%
% commands ------------------------------------------------------------
\newcommand*{\aldineMarkdown}[1] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  % todo provide a command from aldine CLI commands
  \aldineShellExec{pandoc -t latex -o \aldineGet{string}.markdown.tex \aldineGet{local.string}.md}%
  \aldineInclude{\aldineGet{local.string}.markdown}%
}%
% aldine --------------------------------------------------------------
\newcommandx*{\aldineSvgConv}[1] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineShellExec{aldine svg-conv \aldineGet{local.string}}%
}%
\newcommandx*{\aldineLorem}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \aldineShellExec{aldine sample '\aldineGet{local.string}' --override='\aldineGet{local.config}'}%
  \aldineInclude{%
    \aldineGet{local.string}.erb-sample
  }%
}%
\newcommandx*{\aldineBlason}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \aldineShellExec{aldine miniature '\aldineGet{local.string}' --floating --override='\aldineGet{local.config}'}%
  \aldineInclude{%
    \aldineGet{local.string}.erb-miniature
  }%
}%
\newcommandx*{\aldineChapters}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \aldineShellExec{aldine chapters '\aldineGet{local.string}' --override='\aldineGet{local.config}'}%
  \aldineInclude{%
    \aldineGet{local.string}.erb-chapters
  }%
}%
\newcommandx*{\aldineHyperrefSetup}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \aldineShellExec{aldine hyperref-setup '\aldineGet{local.string}' --override='\aldineGet{local.config}'}%
  \aldineInclude{%
    \aldineGet{local.string}.erb-hyperref_setup
  }%
}%
\newcommandx*{\aldineImageFull}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \aldineShellExec{aldine image-full '\aldineGet{local.string}' --override='\aldineGet{local.config}'}%
  \aldineInclude{%
    \aldineGet{local.string}.erb-image_full
  }%
}%
\newcommandx*{\aldineDropcap}[2][2=,usedefault] {%
  \aldineSet{local.string}{\detokenize{#1}}%
  \aldineSet{local.config}{\detokenize{#2}}%
  \StrChar{\aldineGet{local.string}}{1}[\aldineDropcapFirstChar]% FirstChar
  \aldineShellExec{aldine dropcap "\aldineGet{local.string}" --override='\aldineGet{local.config}' --line-no='\the\inputlineno'}%
  \aldineInclude{%
    \aldineDropcapFirstChar.\the\inputlineno.erb-dropcap
  }%
}%
